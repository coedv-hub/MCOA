
clc
clear
close all
tic

outcomeMean=[];  % 保存均值
outcomebest=[];  % 保存最优值
outcomeworst=[];  % 保存最差值
%% 20*20地图
G=[0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0; 
   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 
   0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0; 
   0 0 0 0 0 0 0 1 1 0 0 0 1 0 1 1 1 1 0 0; 
   0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0; 
   0 1 1 1 0 0 0 1 1 0 0 0 1 1 0 0 0 0 0 0; 
   0 1 1 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0;
   0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 
   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 
   0 0 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 
   0 0 0 0 0 0 0 1 1 0 1 1 0 0 1 0 0 0 0 0; 
   0 0 0 0 0 0 0 1 1 0 1 1 0 0 1 0 0 0 0 0; 
   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0; 
   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0; 
   1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0; 
   1 1 0 1 0 0 1 1 0 0 0 1 0 0 0 0 0 0 0 0; 
   0 0 0 0 0 0 1 1 0 1 1 1 0 0 0 0 0 1 1 0; 
   0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0; 
   0 0 0 1 1 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0; 
   0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0;];
G1 = [G;G;G;G;G];
G=[G1,G1,G1,G1,G1];





%% 路径规划
num = size(G,1);
for i=1:num/2  
    for j=1:num
        m=G(i,j);
        n=G(num+1-i,j);
        G(i,j)=n;
        G(num+1-i,j)=m;
    end
end
%% 
S = [1 1];   
E = [num num];  
G0 = G;
G = G0(S(1):E(1),S(2):E(2)); 
[Xmax,dimensions] = size(G); X_min = 1;         
dimensions = dimensions - 2;            

%% 参数设置
max_gen = 1000;    % 最大迭代次数
num_polution = 50;         % 种群数量

fobj=@(x)fitness(x,G);
parfor i=1:30

%% PSO
% [Best_score1(i,:),~,PSO_curve]=PSO(num_polution,max_gen,X_min,Xmax,dimensions,fobj,G);
% %% GWO
% [Best_score2(i,:),~,GWO_curve]=GWO(num_polution,max_gen,X_min,Xmax,dimensions,fobj,G);
% %% GRO
[Best_score3(i,:),~,GRO_curve]=GRO(num_polution,max_gen,X_min,Xmax,dimensions,fobj,G);
% %% GWCA
% [Best_score4(i,:),~,GWCA_curve]=GWCA(num_polution,max_gen,X_min,Xmax,dimensions,fobj,G);
% %% RIME
% [Best_score5(i,:),~,RIME_curve]=RIME(num_polution,max_gen,X_min,Xmax,dimensions,fobj,G);
% %% ERIME
% [Best_score6(i,:),~,ERIME_curve]=ERIME(num_polution,max_gen,X_min,Xmax,dimensions,fobj,G);

end


outcomeMean1=[mean(Best_score3)];
outcomeMean=vertcat(outcomeMean,outcomeMean1);  % 保存均值

outcomebest1=[min(Best_score3)];
outcomeMean=vertcat(outcomeMean,outcomeMean1);  % 保存最优值

outcomeworst1=[max(Best_score3)];
outcomeMean=vertcat(outcomeMean,outcomeMean1);  % 保存最差值



